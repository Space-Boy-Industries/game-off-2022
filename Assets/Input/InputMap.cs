//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Bullet Hell"",
            ""id"": ""04f7254c-ab10-42bf-91d9-5c36638228fb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1fa46468-5822-4273-92be-0b31f2c2ff3b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Position "",
                    ""type"": ""Value"",
                    ""id"": ""d78223cd-7713-4c57-a801-08b8e5648ae2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Precision Mode"",
                    ""type"": ""Button"",
                    ""id"": ""291878b6-9dc2-4313-86c5-8ff35bccf69b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ea680ced-0131-47d7-a12c-a881167c232e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3ea2e813-8841-4e91-828b-bfc810851872"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""82595e2f-3215-4315-aaed-f9e1a36964f2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3c2da71a-c273-44fb-8217-880f8696e589"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""963afc1a-0f76-4b0a-b96c-cb6e484782cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""9ffcfb20-dc3e-4ada-bdf1-fc02e250e889"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3927c276-9b07-40ec-8636-75073aaba7ca"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c8974a6-d554-4e3f-8878-ff4dc5682c2a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aa29bc78-de4d-4fcd-88eb-bba64761394b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b34a36c-492a-4843-8033-54237d52a6c2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f104b80e-10ea-4ec1-8a67-57f87a5cb283"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Mouse Position "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ad8beaf-64dd-428f-833a-650e323fc7a5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Precision Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Button Masher"",
            ""id"": ""aaff75c8-77e2-4c43-a392-68e6053a6537"",
            ""actions"": [
                {
                    ""name"": ""Mash Button"",
                    ""type"": ""Button"",
                    ""id"": ""07b7ce98-9684-4274-91e4-3c2ec04cda84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a363305a-7afb-40bf-9e71-5fffad1547fe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboad & Mouse"",
                    ""action"": ""Mash Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboad & Mouse"",
            ""bindingGroup"": ""Keyboad & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Bullet Hell
        m_BulletHell = asset.FindActionMap("Bullet Hell", throwIfNotFound: true);
        m_BulletHell_Move = m_BulletHell.FindAction("Move", throwIfNotFound: true);
        m_BulletHell_MousePosition = m_BulletHell.FindAction("Mouse Position ", throwIfNotFound: true);
        m_BulletHell_PrecisionMode = m_BulletHell.FindAction("Precision Mode", throwIfNotFound: true);
        // Button Masher
        m_ButtonMasher = asset.FindActionMap("Button Masher", throwIfNotFound: true);
        m_ButtonMasher_MashButton = m_ButtonMasher.FindAction("Mash Button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bullet Hell
    private readonly InputActionMap m_BulletHell;
    private IBulletHellActions m_BulletHellActionsCallbackInterface;
    private readonly InputAction m_BulletHell_Move;
    private readonly InputAction m_BulletHell_MousePosition;
    private readonly InputAction m_BulletHell_PrecisionMode;
    public struct BulletHellActions
    {
        private @InputMap m_Wrapper;
        public BulletHellActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BulletHell_Move;
        public InputAction @MousePosition => m_Wrapper.m_BulletHell_MousePosition;
        public InputAction @PrecisionMode => m_Wrapper.m_BulletHell_PrecisionMode;
        public InputActionMap Get() { return m_Wrapper.m_BulletHell; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BulletHellActions set) { return set.Get(); }
        public void SetCallbacks(IBulletHellActions instance)
        {
            if (m_Wrapper.m_BulletHellActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMove;
                @MousePosition.started -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnMousePosition;
                @PrecisionMode.started -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnPrecisionMode;
                @PrecisionMode.performed -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnPrecisionMode;
                @PrecisionMode.canceled -= m_Wrapper.m_BulletHellActionsCallbackInterface.OnPrecisionMode;
            }
            m_Wrapper.m_BulletHellActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @PrecisionMode.started += instance.OnPrecisionMode;
                @PrecisionMode.performed += instance.OnPrecisionMode;
                @PrecisionMode.canceled += instance.OnPrecisionMode;
            }
        }
    }
    public BulletHellActions @BulletHell => new BulletHellActions(this);

    // Button Masher
    private readonly InputActionMap m_ButtonMasher;
    private IButtonMasherActions m_ButtonMasherActionsCallbackInterface;
    private readonly InputAction m_ButtonMasher_MashButton;
    public struct ButtonMasherActions
    {
        private @InputMap m_Wrapper;
        public ButtonMasherActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MashButton => m_Wrapper.m_ButtonMasher_MashButton;
        public InputActionMap Get() { return m_Wrapper.m_ButtonMasher; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonMasherActions set) { return set.Get(); }
        public void SetCallbacks(IButtonMasherActions instance)
        {
            if (m_Wrapper.m_ButtonMasherActionsCallbackInterface != null)
            {
                @MashButton.started -= m_Wrapper.m_ButtonMasherActionsCallbackInterface.OnMashButton;
                @MashButton.performed -= m_Wrapper.m_ButtonMasherActionsCallbackInterface.OnMashButton;
                @MashButton.canceled -= m_Wrapper.m_ButtonMasherActionsCallbackInterface.OnMashButton;
            }
            m_Wrapper.m_ButtonMasherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MashButton.started += instance.OnMashButton;
                @MashButton.performed += instance.OnMashButton;
                @MashButton.canceled += instance.OnMashButton;
            }
        }
    }
    public ButtonMasherActions @ButtonMasher => new ButtonMasherActions(this);
    private int m_KeyboadMouseSchemeIndex = -1;
    public InputControlScheme KeyboadMouseScheme
    {
        get
        {
            if (m_KeyboadMouseSchemeIndex == -1) m_KeyboadMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboad & Mouse");
            return asset.controlSchemes[m_KeyboadMouseSchemeIndex];
        }
    }
    public interface IBulletHellActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnPrecisionMode(InputAction.CallbackContext context);
    }
    public interface IButtonMasherActions
    {
        void OnMashButton(InputAction.CallbackContext context);
    }
}
